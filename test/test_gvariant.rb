require 'minitest/autorun'
require 'gvariant'

class GVariantTest < Minitest::Test

  def test_basic
    assert GVariant.new(nil, nil) != nil
  end

  def test_invalid_type
  end

  def test_boolean
    assert_equal(false, GVariant.deserialize('b', [ 0x00 ]))
    assert_equal(true, GVariant.deserialize('b', [ 0x01 ]))
  end

  def test_numbers
    assert_equal(  42, GVariant.deserialize('y', [ 0x2a ]))

    assert_equal( -42, GVariant.deserialize('n', [ 0xd6, 0xff ]))
    assert_equal(  42, GVariant.deserialize('q', [ 0x2a, 0x00 ]))

    assert_equal( -42, GVariant.deserialize('i', [ 0xd6, 0xff, 0xff, 0xff ]))
    assert_equal(  42, GVariant.deserialize('u', [ 0x2a, 0x00, 0x00, 0x00 ]))

    assert_equal( -42, GVariant.deserialize('x', [ 0xd6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ]))
    assert_equal(  42, GVariant.deserialize('t', [ 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 ]))
  end

  def test_large_integers
    [ 'x', 't' ].each do |t|
      assert_equal(                96, GVariant.deserialize(t, [ 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 ]))
      assert_equal(              3072, GVariant.deserialize(t, [ 0x0, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 ]))
      assert_equal(             98304, GVariant.deserialize(t, [ 0x0, 0x80, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0 ]))
      assert_equal(           3145728, GVariant.deserialize(t, [ 0x0, 0x0, 0x30, 0x0, 0x0, 0x0, 0x0, 0x0 ]))
      assert_equal(         100663296, GVariant.deserialize(t, [ 0x0, 0x0, 0x0, 0x6, 0x0, 0x0, 0x0, 0x0 ]))
      assert_equal(        3221225472, GVariant.deserialize(t, [ 0x0, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x0 ]))
      assert_equal(      103079215104, GVariant.deserialize(t, [ 0x0, 0x0, 0x0, 0x0, 0x18, 0x0, 0x0, 0x0 ]))
      assert_equal(     3298534883328, GVariant.deserialize(t, [ 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0x0, 0x0 ]))
      assert_equal(   105553116266496, GVariant.deserialize(t, [ 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0 ]))
      assert_equal(  3377699720527872, GVariant.deserialize(t, [ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xc, 0x0 ]))
    end

    assert_equal(                 -96, GVariant.deserialize('x', [ 0xa0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ]))
    assert_equal(               -3072, GVariant.deserialize('x', [ 0x0, 0xf4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ]))
    assert_equal(              -98304, GVariant.deserialize('x', [ 0x0, 0x80, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff ]))
    assert_equal(            -3145728, GVariant.deserialize('x', [ 0x0, 0x0, 0xd0, 0xff, 0xff, 0xff, 0xff, 0xff ]))
    assert_equal(          -100663296, GVariant.deserialize('x', [ 0x0, 0x0, 0x0, 0xfa, 0xff, 0xff, 0xff, 0xff ]))
    assert_equal(         -3221225472, GVariant.deserialize('x', [ 0x0, 0x0, 0x0, 0x40, 0xff, 0xff, 0xff, 0xff ]))
    assert_equal(       -103079215104, GVariant.deserialize('x', [ 0x0, 0x0, 0x0, 0x0, 0xe8, 0xff, 0xff, 0xff ]))
    assert_equal(      -3298534883328, GVariant.deserialize('x', [ 0x0, 0x0, 0x0, 0x0, 0x0, 0xfd, 0xff, 0xff ]))
    assert_equal(    -105553116266496, GVariant.deserialize('x', [ 0x0, 0x0, 0x0, 0x0, 0x0, 0xa0, 0xff, 0xff ]))
    assert_equal(   -3377699720527872, GVariant.deserialize('x', [ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xf4, 0xff ]))
  end

  def test_doubles
    assert_equal(42.5, GVariant.deserialize('d', [ 0x0, 0x0, 0x0, 0x0, 0x0, 0x40, 0x45, 0x40 ]))
  end

  def test_strings
    assert_equal('',    GVariant.deserialize('s', [ 0x00 ]))
    assert_equal('abc', GVariant.deserialize('s', [ 0x61, 0x62, 0x63, 0x0 ]))
  end

  def test_variants
    assert_equal({ type: 'i', value: 42 },      GVariant.deserialize('v', [ 0x2a, 0x0, 0x0, 0x0, 0x0, 0x69 ]))
    assert_equal({ type: 'ay', value: [ 42 ] }, GVariant.deserialize('v', [ 0x2a, 0x0, 0x61, 0x79 ]))
  end

  def test_maybes
    assert_equal(nil,   GVariant.deserialize('my', []))
    assert_equal(42,    GVariant.deserialize('my', [ 0x2a ]))
    assert_equal('abc', GVariant.deserialize('ms', [ 0x61, 0x62, 0x63, 0x0, 0x0 ]))
  end

  def test_arrays
    assert_equal([],                   GVariant.deserialize('ay', []))
    assert_equal([ 1, 2, 3 ],          GVariant.deserialize('ay', [ 0x1, 0x2, 0x3 ]))
    assert_equal([],                   GVariant.deserialize('as', []))
    assert_equal([ 'abc', 'x', 'yz' ], GVariant.deserialize('as', [ 0x61, 0x62, 0x63, 0x0, 0x78, 0x0, 0x79, 0x7a, 0x0, 0x4, 0x6, 0x9 ]))
  end

  def test_tuples
    assert_equal([],                  GVariant.deserialize('()', []))
    assert_equal([ true, 42, 'abc' ], GVariant.deserialize('(bus)', [ 0x1, 0x0, 0x0, 0x0, 0x2a, 0x0, 0x0, 0x0, 0x61, 0x62, 0x63, 0x0 ]))
    assert_equal([ true, 'abc', 42 ], GVariant.deserialize('(bsy)', [ 0x1, 0x61, 0x62, 0x63, 0x0, 0x2a, 0x5 ]))
  end

  def test_dicts
    assert_equal({}, GVariant.deserialize('a{sv}', []))
    assert_equal([{ abc: { type: 'i', value: 42 }}, { def: { type: 'i', value: 43 }}],
                 GVariant.deserialize('a{sv}', [ 0x61, 0x62, 0x63, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2a, 0x0, 0x0, 0x0, 0x0, 0x69, 0x4, 0x0,
                                                 0x64, 0x65, 0x66, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2b, 0x0, 0x0, 0x0, 0x0, 0x69, 0x4, 0xf, 0x1f ]))
  end

  def test_malformed
    assert_equal(false, GVariant.deserialize('b', [ 0x1, 0x1, 0x1 ]))
    assert_equal(0,     GVariant.deserialize('y', []))
    assert_equal(0,     GVariant.deserialize('u', [ 0x00, 0x01 ]))
    assert_equal(0,     GVariant.deserialize('x', [ 0x0, 0x1, 0x2, 0x3 ]))

    assert_equal(true,  GVariant.deserialize('b', [ 0x2a ]))
    assert_equal('',    GVariant.deserialize('s', [ 0x61 ]))
    assert_equal('a',   GVariant.deserialize('s', [ 0x61, 0x0, 0x61, 0x0  ]))

    assert_equal(nil, GVariant.deserialize('my', []))
    assert_equal(nil, GVariant.deserialize('mu', [ 0x1, 0x2, 0x3, 0x4, 0x5]))
    assert_equal([],  GVariant.deserialize('aq', [ 0x1 ]))
  end

end